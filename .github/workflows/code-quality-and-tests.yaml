
name: Check code quality and run unit tests

on: [push]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
    - name: Check version
      run: |
        python -c 'import subprocess, re, pkg_resources, sys; path, variable = sys.argv[1:3]; version_pattern = re.compile(rf"^{variable}.*?=.*?[''\"](.*?)[''\"]", flags=re.M); to_version = lambda cmd: pkg_resources.parse_version(version_pattern.findall(subprocess.run(cmd, capture_output=True,shell=True).stdout.decode())[0]); main = to_version(f"git show main:{path}"); current = to_version(f"cat {path}"); assert main < current, f"Version of current commit ({current}) has not been incremented (from {main})."' xsdtopydantic/__init__.py __version__
  build:
    if: ${{ success() }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Print dependencies
        run: pip freeze
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Unit tests [pytest]
        if: ${{ always() }}
        run: pytest --cov=xsdtopydantic --cov-report term-missing
      - name: Check docstrings [pydocstyle]
        if: ${{ always() }}
        run: pydocstyle xsdtopydantic
      - name: Check code quality [black]
        if: ${{ always() }}
        run: black --check xsdtopydantic
      - name: Check security [bandit]
        if: ${{ always() }}
        run: bandit -r xsdtopydantic
      
